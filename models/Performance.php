<?php

namespace app\models;

use nsept\behaviors\CyrillicSlugBehavior;
use Yii;
use yii\behaviors\SluggableBehavior;
use yii\web\UploadedFile;

/**
 * This is the model class for table "performance".
 *
 * @property int $id
 * @property string $title_ru
 * @property string $title_uz
 * @property string $title_en
 * @property string $description_ru
 * @property string $description_uz
 * @property string $description_en
 * @property string $author
 * @property string $file_name
 * @property string $file_path
 * @property int $status
 *
 * @property RefStatus $status_
 * @property PerformanceArtist[] $performanceArtists
 * @property Repertuar[] $repertuars
 */
class Performance extends \yii\db\ActiveRecord
{
    public $mainPhoto;

    public function behaviors()
    {
        return [
            [
                'class' => CyrillicSlugBehavior::className(),
                'attribute' => 'title_ru',
                //'slugAttribute' => 'slug',
            ],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'performance';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['description_ru', 'description_uz', 'description_en', 'file_name', 'file_path', 'slug'], 'string'],
            [['status'], 'integer'],
            ['title_ru', 'unique'],
            [['title_ru', 'author', 'title_uz', 'title_en'], 'string', 'max' => 255],
            [['mainPhoto'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            [['status'], 'exist', 'skipOnError' => true, 'targetClass' => RefStatus::className(), 'targetAttribute' => ['status' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('main', 'ID'),
            'title_ru' => Yii::t('main', 'Навзание на Рус.'),
            'title_uz' => Yii::t('main', 'Навзание на узб.'),
            'title_en' => Yii::t('main', 'Навзание на анг.'),
            'description_ru' => Yii::t('main', 'Описание на Рус.'),
            'description_uz' => Yii::t('main', 'Описание на узб.'),
            'description_en' => Yii::t('main', 'Описание на анг.'),
            'author' => Yii::t('main', 'Автор'),
            'file_name' => Yii::t('main', 'File Name'),
            'file_path' => Yii::t('main', 'File Path'),
            'status' => Yii::t('main', 'Статус'),
        ];
    }

    public function beforeDelete()
    {
        self::removeDir($this->title);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {

            if ($file = UploadedFile::getInstance($this, 'mainPhoto')) {
                $path = 'uploads/' . $file->baseName . '.' . $file->extension;
                $file->saveAs($path);
                $this->file_name = $file->baseName . '.' . $file->extension;
                $this->file_path = $path;
            }


            self::createDir($this->title);

            return true;
        }
        return false;
    }


    private static function removeDir($name)
    {
        $dir = 'uploads/performance/' . $name;
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (is_dir($dir . "/" . $object))
                        rmdir($dir . "/" . $object);
                    else
                        unlink($dir . "/" . $object);
                }
            }
            rmdir($dir);
        }

    }

    private static function createDir($name)
    {
        $path = 'uploads/performance/' . $name;
        if (!is_dir($path)) {
            mkdir($path);
        }
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStatus_()
    {
        return $this->hasOne(RefStatus::className(), ['id' => 'status']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPerformanceArtists()
    {
        return $this->hasMany(PerformanceArtist::className(), ['performance_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRepertuars()
    {
        return $this->hasMany(Repertuar::className(), ['performance_id' => 'id']);
    }
}
